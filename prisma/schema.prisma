datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String         @id @default(cuid())
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  firstName       String
  middleName      String?
  lastName        String
  suffix          String?
  role            Role           @default(USER)
  passwordHash    String
  dashboardCards  Json? // ← store ["revenue","users",…]
  dashboardCharts Json? // ← store ["line","pie","bar"]
  notifications   Notification[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt

  // NextAuth relations:
  accounts    Account[]
  sessions    Session[]
  kanbanBoard KanbanBoard[]
  sentMessages     Message[]       @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refresh_token")
  access_token       String? @map("access_token")
  expires_at         Int?    @map("expires_at")
  token_type         String? @map("token_type")
  scope              String?
  id_token           String? @map("id_token")
  session_state      String?
  oauth_token_secret String? @map("oauth_token_secret")
  oauth_token        String? @map("oauth_token")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id        String   @id @default(cuid())
  message   String?
  read      Boolean  @default(false)
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model KanbanBoard {
  id        String         @id @default(cuid())
  title     String
  owner     User           @relation(fields: [ownerId], references: [id])
  ownerId   String
  columns   KanbanColumn[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
}

model KanbanColumn {
  id        String       @id @default(cuid())
  title     String
  order     Int // used for sorting
  board     KanbanBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  cards     KanbanCard[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}

model KanbanCard {
  id        String       @id @default(cuid())
  content   String
  order     Int // used for sorting
  column    KanbanColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}

model Message {
  id                  String   @id @default(cuid())
  sender              User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId            String
  recipient           User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId         String
  content             String
  deletedForSender    Boolean  @default(false)
  deletedForRecipient Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt

  @@index([senderId, recipientId])
}
